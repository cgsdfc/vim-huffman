Before:

  let input_data = [
    \ [[ 'A', 2 ], [ 'B', 4 ], [ 'C', 1 ], [ 'D', 1 ]],
    \ [ ['a',1],['b',2],['c',3] ],
    \ [[' ', 139],
    \  ['-', 16],
    \  [',', 5],
    \  ['.', 6],
    \  ['I', 1],
    \  ['H', 1],
    \  ['T', 2],
    \  ['W', 2],
    \  ['V', 1],
    \  ['a', 75],
    \  ['c', 23],
    \  ['b', 14],
    \  ['e', 108],
    \  ['d', 32],
    \  ['g', 20],
    \  ['f', 15],
    \  ['i', 68],
    \  ['h', 21],
    \  ['k', 4],
    \  ['j', 3],
    \  ['m', 15],
    \  ['l', 36],
    \  ['o', 70],
    \  ['n', 72],
    \  ['p', 27],
    \  ['s', 62],
    \  ['r', 61],
    \  ['u', 23],
    \  ['t', 86],
    \  ['w', 13],
    \  ['v', 7],
    \  ['y', 12],
    \  ['x', 1]],
    \] 

  let output_data = [
    \ {'A': '10', 'B': '0', 'C': '110', 'D': '111'},
    \ {'a': '10', 'b': '11', 'c': '0'},
    \ {' ': '101',
      \  ',': '01111110',
      \  '-': '011110',
      \  '.': '01111111',
      \  'H': '0111110010',
      \  'I': '0111110011',
      \  'T': '010001110',
      \  'V': '0100011110',
      \  'W': '011111000',
      \  'a': '1101',
      \  'b': '010000',
      \  'c': '00000',
      \  'd': '01110',
      \  'e': '001',
      \  'f': '010011',
      \  'g': '111010',
      \  'h': '111011',
      \  'i': '1000',
      \  'j': '01000110',
      \  'k': '01111101',
      \  'l': '11100',
      \  'm': '010010',
      \  'n': '1100',
      \  'o': '1001',
      \  'p': '00011',
      \  'r': '0101',
      \  's': '0110',
      \  't': '1111',
      \  'u': '00001',
      \  'v': '0100010',
      \  'w': '000101',
      \  'x': '0100011111',
      \  'y': '000100'}
    \]

  let N = len(input_data)
  AssertEqual N, len(output_data), 'Number of input and output data should match'
  
Execute(test class Leaf):
  let leaf = huffman#huffman#Leaf('a', 2)
  AssertEqual leaf.symbol, 'a'
  AssertEqual leaf.weight, 2
  AssertEqual leaf.parent, v:none
  AssertEqual leaf.code(), ''

Execute(test class Node):
  let leaves = [['a',1],['b',2],['c',3]]
  call map(leaves, 'huffman#huffman#Leaf(v:val[0], v:val[1])')
  let node = huffman#huffman#Node(leaves[0], leaves[1])
  Assert node.parent is# v:none
  Assert leaves[0].parent is# node
  Assert leaves[1].parent is# node
  Assert node.left is# leaves[0]
  Assert node.right is# leaves[1]
  AssertEqual node.weight, leaves[0].weight+leaves[1].weight
  Assert !node.__lt__(leaves[0])
  Assert !node.__lt__(leaves[1])
  Assert leaves[0].__lt__(leaves[1])

Execute(test class Tree with non-empty input):
  for x in range(N)
    let tree = huffman#huffman#Tree(input_data[x])
    AssertEqual tree.codebook, output_data[x]
  endfor

Execute(codebook() should throw when input is neither a List or a Dictionary):
  AssertThrow huffman#codebook(1)

Execute(codebook() should return {} when the input is empty):
  AssertEqual {}, huffman#codebook([])
  AssertEqual {}, huffman#codebook({})
